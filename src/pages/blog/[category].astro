---
/**
 * Blog Category Pages
 *
 * Generates static pages for each blog category:
 * /blog/all/, /blog/personal/, /blog/cockroach-labs/, etc.
 */

import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostCard from '../../components/PostCard.astro';
import { crlPosts } from '../../data/crl-posts';
import { publications } from '../../data/publications';

// Define post types
type PersonalPost = {
  title: string;
  date: Date;
  excerpt: string;
  tags: string[];
  image: string | null;
  slug: string;
  source: 'personal';
};

type ExternalPost = {
  title: string;
  date: Date;
  excerpt: string;
  tags: string[];
  image: string | null;
  url: string;
  source: 'cockroach-labs' | 'publications';
};

type Post = PersonalPost | ExternalPost;

interface Props {
  filteredPosts: Post[];
  selectedCategory: string;
  allTags: string[];
  allPosts: Post[];
}

export async function getStaticPaths() {
  // Get all published personal blog posts
  const personalPosts = await getCollection('blog');
  const publishedPersonalPosts: PersonalPost[] = personalPosts
    .filter((post) => !post.data.draft)
    .map((post: CollectionEntry<'blog'>): PersonalPost => ({
      title: post.data.title,
      date: post.data.date,
      excerpt: post.data.excerpt,
      tags: post.data.tags,
      image: post.data.image || null,
      slug: post.slug,
      source: 'personal' as const,
    }));

  // Convert CRL posts to same format
  const crlPostsFormatted: ExternalPost[] = crlPosts.map(
    (post): ExternalPost => ({
      title: post.title,
      date: new Date(post.date),
      excerpt: post.excerpt,
      tags: post.tags || [],
      image: post.image,
      url: post.url,
      source: 'cockroach-labs' as const,
    })
  );

  // Convert publications to same format
  const publicationsFormatted: ExternalPost[] = publications.map(
    (pub): ExternalPost => ({
      title: pub.title,
      date: new Date(pub.date),
      excerpt: `${pub.venue} - ${pub.excerpt}`,
      tags: pub.tags || [],
      image: pub.image || null,
      url: pub.url,
      source: 'publications' as const,
    })
  );

  // Combine and sort all posts
  const allPosts: Post[] = [
    ...publishedPersonalPosts,
    ...crlPostsFormatted,
    ...publicationsFormatted,
  ].sort((a, b) => b.date.valueOf() - a.date.valueOf());

  // Get all unique tags
  const allTags: string[] = Array.from(
    new Set(allPosts.flatMap((post: Post) => post.tags))
  ).sort();

  // Define categories to generate
  const categories = [
    { slug: 'all', name: 'All categories' },
    { slug: 'personal', name: 'Personal Blog' },
    { slug: 'cockroach-labs', name: 'Cockroach Labs' },
    { slug: 'publications', name: 'Publications' },
    ...['ai', 'databases', 'product-management']
      .filter((tag) => allTags.includes(tag))
      .map((tag) => ({ slug: tag, name: tag })),
  ];

  // Generate a page for each category
  return categories.map((category) => {
    let filteredPosts = allPosts;

    if (category.slug === 'personal') {
      filteredPosts = allPosts.filter((p) => p.source === 'personal');
    } else if (category.slug === 'cockroach-labs') {
      filteredPosts = allPosts.filter((p) => p.source === 'cockroach-labs');
    } else if (category.slug === 'publications') {
      filteredPosts = allPosts.filter((p) => p.source === 'publications');
    } else if (category.slug !== 'all' && allTags.includes(category.slug)) {
      filteredPosts = allPosts.filter((p) => p.tags.includes(category.slug));
    }

    return {
      params: { category: category.slug },
      props: {
        filteredPosts,
        selectedCategory: category.slug,
        allTags,
        allPosts,
      },
    };
  });
}

const { filteredPosts, selectedCategory, allTags } = Astro.props;
---

<BaseLayout
  title="Blog - Andy Woods"
  description="Writing about AI, databases, and product management"
>
  {/* Header */}
  <header class="mb-8">
    <h1 class="font-sans text-4xl font-bold mb-4 text-black">Blog</h1>
    <p class="text-lg text-gray-600">
      Thoughts on AI, databases, product management, and building products developers love.
    </p>
  </header>

  {/* Two-Row Filter System */}
  <nav class="mb-8 pb-6 border-b border-gray-200">
    {/* Row 1: Sources */}
    <div class="mb-4">
      <h2 class="text-sm font-medium text-gray-600 uppercase tracking-wide mb-2">Sources</h2>
      <ul class="flex gap-6 flex-wrap list-none m-0 p-0">
        {/* All */}
        <li>
          <a
            href="/blog/all"
            class:list={[
              'text-base no-underline transition-colors pb-2',
              selectedCategory === 'all'
                ? 'text-black font-medium border-b-2 border-black'
                : 'text-gray-600 hover:text-black',
            ]}
          >
            All
          </a>
        </li>

        {/* Personal Blog */}
        <li>
          <a
            href="/blog/personal"
            class:list={[
              'text-base no-underline transition-colors pb-2',
              selectedCategory === 'personal'
                ? 'text-black font-medium border-b-2 border-black'
                : 'text-gray-600 hover:text-black',
            ]}
          >
            Personal Blog
          </a>
        </li>

        {/* Cockroach Labs */}
        <li>
          <a
            href="/blog/cockroach-labs"
            class:list={[
              'text-base no-underline transition-colors pb-2',
              selectedCategory === 'cockroach-labs'
                ? 'text-black font-medium border-b-2 border-black'
                : 'text-gray-600 hover:text-black',
            ]}
          >
            Cockroach Labs
          </a>
        </li>

        {/* Publications */}
        <li>
          <a
            href="/blog/publications"
            class:list={[
              'text-base no-underline transition-colors pb-2',
              selectedCategory === 'publications'
                ? 'text-black font-medium border-b-2 border-black'
                : 'text-gray-600 hover:text-black',
            ]}
          >
            Publications
          </a>
        </li>
      </ul>
    </div>

    {/* Row 2: Categories */}
    <div>
      <h2 class="text-sm font-medium text-gray-600 uppercase tracking-wide mb-2">Categories</h2>
      <ul class="flex gap-6 flex-wrap list-none m-0 p-0">
        {/* AI */}
        {
          allTags.includes('ai') && (
            <li>
              <a
                href="/blog/ai"
                class:list={[
                  'text-base no-underline transition-colors pb-2',
                  selectedCategory === 'ai'
                    ? 'text-black font-medium border-b-2 border-black'
                    : 'text-gray-600 hover:text-black',
                ]}
              >
                AI
              </a>
            </li>
          )
        }

        {/* Databases */}
        {
          allTags.includes('databases') && (
            <li>
              <a
                href="/blog/databases"
                class:list={[
                  'text-base no-underline transition-colors pb-2',
                  selectedCategory === 'databases'
                    ? 'text-black font-medium border-b-2 border-black'
                    : 'text-gray-600 hover:text-black',
                ]}
              >
                Databases
              </a>
            </li>
          )
        }

        {/* Product Management */}
        {
          allTags.includes('product-management') && (
            <li>
              <a
                href="/blog/product-management"
                class:list={[
                  'text-base no-underline transition-colors pb-2',
                  selectedCategory === 'product-management'
                    ? 'text-black font-medium border-b-2 border-black'
                    : 'text-gray-600 hover:text-black',
                ]}
              >
                Product Management
              </a>
            </li>
          )
        }
      </ul>
    </div>
  </nav>

  {/* Post Cards */}
  <div class="space-y-0">
    {
      filteredPosts.map((post: Post) => {
        return (
          <PostCard
            title={post.title}
            date={post.date}
            excerpt={post.excerpt}
            tags={post.tags}
            image={post.image}
            slug={'slug' in post ? post.slug : undefined}
            url={'url' in post ? post.url : undefined}
            source={post.source}
          />
        );
      })
    }
  </div>

  {filteredPosts.length === 0 && <p class="text-gray-600 italic">No posts in this category yet.</p>}
</BaseLayout>
