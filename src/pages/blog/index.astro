---
/**
 * Blog Page
 *
 * Displays all blog posts (personal + Cockroach Labs) with category filters.
 * Posts are shown chronologically with card-based design including images.
 */

import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostCard from '../../components/PostCard.astro';
import { crlPosts } from '../../data/crl-posts';

// Get all published personal blog posts
const personalPosts = await getCollection('blog');
const publishedPersonalPosts = personalPosts
  .filter(post => !post.data.draft)
  .map(post => ({
    title: post.data.title,
    date: post.data.date,
    excerpt: post.data.excerpt,
    tags: post.data.tags,
    image: post.data.image || null,
    slug: post.slug,
    source: 'personal' as const,
  }));

// Convert CRL posts to same format
const crlPostsFormatted = crlPosts.map(post => ({
  title: post.title,
  date: new Date(post.date),
  excerpt: post.excerpt,
  tags: post.tags || [],
  image: post.image,
  url: post.url,
  source: 'cockroach-labs' as const,
}));

// Combine and sort all posts by date (newest first)
const allPosts = [...publishedPersonalPosts, ...crlPostsFormatted]
  .sort((a, b) => b.date.valueOf() - a.date.valueOf());

// Get all unique tags from both sources
const allTags = Array.from(new Set(
  allPosts.flatMap(post => post.tags)
)).sort();

// Get category from URL parameter
const urlParams = Astro.url.searchParams;
const selectedCategory = urlParams.get('category') || 'all';

// Filter posts by category
let filteredPosts = allPosts;
if (selectedCategory === 'personal') {
  filteredPosts = allPosts.filter(p => p.source === 'personal');
} else if (selectedCategory === 'cockroach-labs') {
  filteredPosts = allPosts.filter(p => p.source === 'cockroach-labs');
} else if (selectedCategory !== 'all' && allTags.includes(selectedCategory)) {
  // Filter by tag
  filteredPosts = allPosts.filter(p => p.tags.includes(selectedCategory));
}
---

<BaseLayout
  title="Blog - Andy Woods"
  description="Writing about AI, databases, and product management"
>
  {/* Header */}
  <header class="mb-8">
    <h1 class="font-sans text-4xl font-bold mb-4 text-black">Blog</h1>
    <p class="text-lg text-gray-600">
      Thoughts on AI, databases, product management, and building products developers love.
    </p>
  </header>

  {/* Category Filters */}
  <nav class="mb-8 pb-6 border-b border-gray-200">
    <ul class="flex gap-6 flex-wrap list-none m-0 p-0">
      {/* All categories */}
      <li>
        <a
          href="/blog"
          class:list={[
            "text-base no-underline transition-colors pb-2",
            selectedCategory === 'all'
              ? "text-black font-medium border-b-2 border-black"
              : "text-gray-600 hover:text-black"
          ]}
        >
          All categories
        </a>
      </li>

      {/* Personal blog */}
      <li>
        <a
          href="/blog?category=personal"
          class:list={[
            "text-base no-underline transition-colors pb-2",
            selectedCategory === 'personal'
              ? "text-black font-medium border-b-2 border-black"
              : "text-gray-600 hover:text-black"
          ]}
        >
          Personal Blog
        </a>
      </li>

      {/* Cockroach Labs */}
      <li>
        <a
          href="/blog?category=cockroach-labs"
          class:list={[
            "text-base no-underline transition-colors pb-2",
            selectedCategory === 'cockroach-labs'
              ? "text-black font-medium border-b-2 border-black"
              : "text-gray-600 hover:text-black"
          ]}
        >
          Cockroach Labs
        </a>
      </li>

      {/* Popular tag categories */}
      {['ai', 'databases', 'product-management'].filter(tag => allTags.includes(tag)).map(tag => (
        <li>
          <a
            href={`/blog?category=${tag}`}
            class:list={[
              "text-base no-underline transition-colors pb-2 capitalize",
              selectedCategory === tag
                ? "text-black font-medium border-b-2 border-black"
                : "text-gray-600 hover:text-black"
            ]}
          >
            {tag.replace('-', ' ')}
          </a>
        </li>
      ))}
    </ul>
  </nav>

  {/* Post Cards */}
  <div class="space-y-0">
    {filteredPosts.map(post => (
      <PostCard
        title={post.title}
        date={post.date}
        excerpt={post.excerpt}
        tags={post.tags}
        image={post.image}
        slug={'slug' in post ? post.slug : undefined}
        url={'url' in post ? post.url : undefined}
        source={post.source}
      />
    ))}
  </div>

  {filteredPosts.length === 0 && (
    <p class="text-gray-500 italic">No posts in this category yet.</p>
  )}
</BaseLayout>
